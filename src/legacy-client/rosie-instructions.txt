`
(all text should be within the backticks at the top and bottom of the file. don't use new backticks or the code will crash **important**)


Section 1:
Coding pattern preferences

- Always prefer simple solutions  
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality  
- Write code that takes into account the different environments: dev, test, and prod  
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested  
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we donâ€™t have duplicate logic.  
- Keep the codebase very clean and organized  
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once  
- Avoid having files over 800-1000 lines of code. Refactor at that point.  
- Mocking data is only needed for tests, never mock data for dev or prod  
- Never add stubbing or fake data patterns to code that affects the dev or prod environments  
- Never overwrite my .js files without first asking and confirming
- Never add unnecessary comments to the code
- Remove console messages from the code after they've been successfully used for debugging to keep the console clear

Section 2:
Project Goal & Context
The primary goal is to port the existing client-side React/JavaScript application to a native iOS application using Xcode. The method will be a complete rewrite of the application from scratch.
My role is to assist in creating detailed, file-by-file documentation of the current web application to serve as the specification for the iOS version.
Documentation for each file should include:
- The file's purpose.
- Key properties and their purpose.
- Descriptions of functions, including their parameters and return values.
- Connections and interdependencies between components.
- Labeled React code snippets for clarity where appropriate.
- All within roughly 300 words. Don't get lost in the details.
Application High-Level Overview:
The application allows users to connect to a cloud storage provider (currently Google Drive, to be replaced by iCloud in iOS) to manage their photos.
- Users can upload a profile picture.
- The app uses face detection to compare photos from their cloud storage against their profile picture to find photos that contain their face.
- Matched photos can be saved to a "Photos of You" collection for easy access.
Important Notes on Features:
- **Incomplete Features:** Friend referral, friend interactions, and photo sharing functionalities are not implemented. Don't detail how to implement them, just keep that in mind as future todos if documenting a relavent file.
- **Deprecated Logic:** The Google Drive integration was partially deprecated in favor of a Google Photos integration that was never completed. The focus for documentation should be on the overall logical flow, as the iOS app will use iCloud, PhotoKit, and Vision frameworks.
- **API Interaction:** Documenting the interactions with the backend API is critical, as this logic will be consistent in the iOS app. This includes detailing API endpoints, request payloads, and expected responses.
`